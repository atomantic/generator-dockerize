#!/usr/bin/env bash

###########################################
# This is the docker management toolkit   #
# It was generated by                     #
# generator-dockerize
# if you find an issue with this script
# make a pull-request on
# https://github.com/atomantic/generator-dockerize
# @author Adam Eivy                       #
# v1.0.1                                  #
###########################################
function dockerStart(){

    # still working on VPN fix
    #ensurePort $APP_PORT_EXTERNAL
    #ensureMount
    running "starting rsync into $VM_NAME"
    startRsync
    ok

    APPURL=http://$(docker-machine ip $VM_NAME 2>/dev/null):$APP_PORT_EXTERNAL
    # instead of loading the VBox IP, we are routing localhost:$APP_PORT_EXTERNAL to VM
    # APPURL=http://localhost:$APP_PORT_EXTERNAL

    running "starting via 'docker-compose up'"
    docker-compose up &

    docker images | grep $APP_NAME_LOCAL > /dev/null 2>&1

    if [[ $? != 0 ]]; then
      # give it time to create and launch the image
      bot "giving docker-compose time to create the image..."
      sleep $VM_CREATE_TIME
    fi

    # load in browser
    bot "OK, the app is booting up, we need to wait just a bit before trying to load it..."
    for i in $(seq $APP_BOOT_TIME 1);do
      bot "$i...";
    sleep 1;
    done

    if [[ $1 != "background" ]]; then

      bot "Launching: $APPURL"
      bot "If the app doesn't work, you can debug it by running the following:\n\$(docker-machine env $VM_NAME > /dev/null);\ndocker exec -i -t \$(docker ps | grep $APP_NAME_LOCAL | awk '{print $1;}') bash"
      # open $APPURL:$APP_PORT_EXTERNAL
      open $APPURL

    fi
}

# setup port forwarding localhost:$APP_PORT_EXTERNAL -> VirtualBox
function ensurePort(){
  running "ensuring port forwarding: "$APP_NAME_LOCAL"_"$1
  VBoxManage showvminfo $VM_NAME | grep $APP_NAME_LOCAL"_"$1 > /dev/null 2>&1
  if [ $? != 0 ]; then
    bot "adding port forwarding for $APP_NAME_LOCAL to $1"
    VBoxManage controlvm $VM_NAME natpf1 $APP_NAME_LOCAL"_"$1,tcp,,$1,,$1
  fi
  ok
}

function declutter(){
  running "removing all stopped containers"
  docker rm $(docker ps -a -q) > /dev/null 2>&1
  ok
  running "removing all untagged images (cruft)"
  docker rmi $(docker images -q --filter "dangling=true") > /dev/null 2>&1
  ok
}

function dockerStop(){
  # killbyname docker-osx-dev
  running "stopping rsync"
  stopRsync
  ok
  running "stopping docker containers"
  docker-compose stop > /dev/null 2>&1
  ok
  declutter
}

function shellinit(){
    running "shellinit"
    # make sure docker port routing is in place (need this if we are on cisco vpn on yosemite)
    # https://github.com/boot2docker/boot2docker/issues/392#issuecomment-66694197
    # still working on VPN fix... this isn't working with docker-machine
    # maybe a fix in here somewhere: https://github.com/docker/machine/issues/1031
    #ensurePort 2376
    #export DOCKER_HOST=tcp://127.0.0.1:2376;
    eval "$(docker-machine env $VM_NAME)"
    ok
}

# ensure that docker is running and mapped properly to the VM
function ensureDocker() {

    running "ensuring $VM_NAME vm is running"

    docker-machine ls | grep $VM_NAME > /dev/null 2>&1
    if [[ $? != 0 ]]; then
      # vm doesn't exist
      action "$VM_NAME vm does not exist. Creating it"

      docker-machine --debug create -d virtualbox $VM_NAME
    fi
    docker-machine ls | grep $VM_NAME | grep Running > /dev/null 2>&1
    if [[ $? != 0 ]]; then
      bot "starting the vm"
      docker-machine start $VM_NAME
    fi
    ok

    shellinit

    docker ps > /dev/null 2>&1;
    if [[ $? != 0 ]]; then
      defaultError
    else
      return 1;
    fi
}

function clean(){
    shellinit
    docker rm -f $(docker ps -a | grep $APP_NAME_LOCAL | awk '{print $1;}')
    docker rmi -f $APP_NAME_LOCAL
}

function startRsync(){
  # only do one
  stopRsync
  cd app
  docker-rsync $VM_NAME &>/dev/null &
  cd -
}

function stopRsync(){
  killbyname docker-rsync &>/dev/null
}

function ensureMount(){
    if [ ! -d "/Users/$(whoami)/rsync" ]; then
      mkdir -p /Users/$(whoami)/rsync
    fi
    VBoxManage showvminfo "$VM_NAME" | grep rsync
    if [[ $? != 0 ]]; then
      docker-machine ls | grep $VM_NAME | grep Running
      if [[ $? == 0 ]]; then
        # have to stop the VM :(
        # otherwise, it will fail to add the shared directory
        docker-machine stop $VM_NAME
      fi
      # add this directory to the VirtualBox mount (otherwise, we can only mount things from ~/)
      # which will appear mountable within docker as /Users...
      VBoxManage sharedfolder add "$VM_NAME" --name "rsync" --hostpath "/Users/$(whoami)/rsync" --automount
      VBoxManage setextradata $VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/rsync 1
    fi
    docker-machine ls | grep $VM_NAME | grep Running
    if [[ $? != 0 ]]; then
        ensureDocker
    fi
    docker-machine ssh $VM_NAME 'sudo mkdir -p /rsync'
    # make sure we mount the rsync directory:
    bot "mounting app folder in vm..."
    docker-machine ssh $VM_NAME 'sudo mount -t vboxsf -o uid=1000,gid=50 rsync /rsync'
    if [[ $? != 0 ]]; then
        bot "drats. That didn't work. We don't have a solution for this yet. If you find one, please pull-request."
        exit -1
    fi
}
