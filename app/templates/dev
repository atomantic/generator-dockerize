#!/usr/bin/env bash

###########################################
# This is the project's developer toolkit #
# It was generated by                     #
# generator-dockerize                     #
#
# if you find an issue with this script
# make a pull-request on
# https://github.com/atomantic/generator-dockerize
#
# @author Adam Eivy                       #
# v1.2.0                                  #
###########################################

# project specific config
source ./dev.config.sh

# docker-compose will strip underscores from the app name to tack on _web
APP_NAME_LOCAL=${APP_NAME//_/}"_web"
REMOTE_NAME="$DOCKER_REPO/$APP_ORG/$APP_NAME"

###
# echo helper functions
###
# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"
COL_BLUE=$ESC_SEQ"34;01m"
COL_MAGENTA=$ESC_SEQ"35;01m"
COL_CYAN=$ESC_SEQ"36;01m"

function ok() {
    echo -e "$COL_GREEN[ok]$COL_RESET "$1
}

function bot() {
    echo
    echo -e "$COL_GREEN\[._.]/$COL_RESET - "$1
}

function running() {
    echo
    echo -en " ⇒ "$1"..."
}

function action() {
    echo -e "$COL_YELLOW[action]$COL_RESET"
    echo -en " ⇒ "$1"..."
}

function warn() {
    echo -e "$COL_YELLOW[warning]$COL_RESET "$1
}

function error() {
    echo -e "$COL_RED[error]$COL_RESET "$1
}

###
# some bash install helpers
###
function require_cask() {
    running "which $1"
    which $1 > /dev/null 2>&1 | true
    if [[ ${PIPESTATUS[0]} != 0 ]]; then
        brew cask list $1 > /dev/null 2>&1 | true
        if [[ ${PIPESTATUS[0]} != 0 ]]; then
            action "brew cask install $1 $2"
            brew cask install $1
            if [[ $? != 0 ]]; then
                error "failed to install $1! aborting..."
                exit -1
            fi
        fi
    fi
    ok
}

function require_tap() {
    running "checking brew tap $1"
    brew tap | grep $1
    if [[ $? != 0 ]]; then
        action "brew tap $1"
        brew tap $1
        if [[ $? != 0 ]]; then
            error "failed to add brew tap $1! aborting..."
            exit -1
        fi
    fi
    ok
}
function require_brew() {
    running "which $1"
    which $1 > /dev/null 2>&1 | true
    if [[ ${PIPESTATUS[0]} != 0 ]]; then
        action "brew install $1 $2"
        brew install $1 $2
        if [[ $? != 0 ]]; then
            error "failed to install $1! aborting..."
            exit -1
        fi
    fi
    ok
}


function install_homebrew() {
    running "checking homebrew"
    brew_bin=$(which brew) 2>&1 > /dev/null
    if [[ $? != 0 ]]; then
        action "installing homebrew"
        ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
        if [[ $? != 0 ]]; then
            error "unable to install homebrew, script $0 abort!"
            exit -1
        fi
    fi
    ok
}

function install_brewcask() {
    running "checking brew-cask"
    output=$(brew tap | grep cask)
    if [[ $? != 0 ]]; then
        action "installing brew-cask"
        require_brew caskroom/cask/brew-cask
    fi
    ok
}


function checkInstall() {
  running "checking install of $1"
  case "$1" in
    *)
        which $1
        ;;
  esac
  if [[ $? != 0 ]]; then
    warn "$1 is not installed";
    return 1;
  fi
  ok
  return 0;
}

###
# Docker helpers
###
function dockerStart(){

    # still working on VPN fix
    #ensurePort $APP_PORT_EXTERNAL
    #ensureMount
    running "starting rsync into $VM_NAME"
    startRsync
    ok

    APPURL=http://$(docker-machine ip $VM_NAME 2>/dev/null):$APP_PORT_EXTERNAL
    # instead of loading the VBox IP, we are routing localhost:$APP_PORT_EXTERNAL to VM
    # APPURL=http://localhost:$APP_PORT_EXTERNAL

    running "starting via 'docker-compose up'"
    docker-compose up &

    docker images | grep $APP_NAME_LOCAL > /dev/null 2>&1

    if [[ $? != 0 ]]; then
      # give it time to create and launch the image
      bot "giving docker-compose time to create the image..."
      sleep $VM_CREATE_TIME
    fi

    # load in browser
    bot "OK, the app is booting up, we need to wait just a bit before trying to load it..."
    for i in $(seq $APP_BOOT_TIME 1);do
      bot "$i...";
    sleep 1;
    done

    if [[ $1 != "background" ]]; then

      bot "Launching: $APPURL"
      bot "If the app doesn't work, you can debug it by running the following:\n\$(docker-machine env $VM_NAME > /dev/null);\ndocker exec -i -t \$(docker ps | grep $APP_NAME_LOCAL | awk '{print $1;}') bash"
      # open $APPURL:$APP_PORT_EXTERNAL
      open $APPURL

    fi
}

# setup port forwarding localhost:$APP_PORT_EXTERNAL -> VirtualBox
function ensurePort(){
  running "ensuring port forwarding: "$APP_NAME_LOCAL"_"$1
  VBoxManage showvminfo $VM_NAME | grep $APP_NAME_LOCAL"_"$1 > /dev/null 2>&1
  if [ $? != 0 ]; then
    bot "adding port forwarding for $APP_NAME_LOCAL to $1"
    VBoxManage controlvm $VM_NAME natpf1 $APP_NAME_LOCAL"_"$1,tcp,,$1,,$1
  fi
  ok
}

function declutter(){
  running "removing all stopped containers"
  docker rm $(docker ps -a -q) > /dev/null 2>&1
  ok
  running "removing all untagged images (cruft)"
  docker rmi $(docker images -q --filter "dangling=true") > /dev/null 2>&1
  ok
}

function dockerStop(){
  # killbyname docker-osx-dev
  running "stopping rsync"
  stopRsync
  ok
  running "stopping docker containers"
  docker-compose stop > /dev/null 2>&1
  ok
  declutter
}

function shellinit(){
    running "shellinit"
    # make sure docker port routing is in place (need this if we are on cisco vpn on yosemite)
    # https://github.com/boot2docker/boot2docker/issues/392#issuecomment-66694197
    # still working on VPN fix... this isn't working with docker-machine
    # maybe a fix in here somewhere: https://github.com/docker/machine/issues/1031
    #ensurePort 2376
    #export DOCKER_HOST=tcp://127.0.0.1:2376;
    eval "$(docker-machine env $VM_NAME)"
    ok
}

# ensure that docker is running and mapped properly to the VM
function ensureDocker() {

    running "ensuring $VM_NAME vm is running"

    docker-machine ls | grep $VM_NAME > /dev/null 2>&1
    if [[ $? != 0 ]]; then
      # vm doesn't exist
      action "$VM_NAME vm does not exist. Creating it"

      docker-machine --debug create -d virtualbox $VM_NAME
    fi
    docker-machine ls | grep $VM_NAME | grep Running > /dev/null 2>&1
    if [[ $? != 0 ]]; then
      bot "starting the vm"
      docker-machine start $VM_NAME
    fi
    ok

    shellinit

    docker ps > /dev/null 2>&1;
    if [[ $? != 0 ]]; then
      defaultError
    else
      return 1;
    fi
}

function clean(){
    shellinit
    docker rm -f $(docker ps -a | grep $APP_NAME_LOCAL | awk '{print $1;}')
    docker rmi -f $APP_NAME_LOCAL
}

function startRsync(){
  # only do one
  stopRsync
  cd app
  docker-rsync $VM_NAME &>/dev/null &
  cd -
}

function stopRsync(){
  killbyname docker-rsync &>/dev/null
}

function ensureMount(){
    if [ ! -d "/Users/$(whoami)/rsync" ]; then
      mkdir -p /Users/$(whoami)/rsync
    fi
    VBoxManage showvminfo "$VM_NAME" | grep rsync
    if [[ $? != 0 ]]; then
      docker-machine ls | grep $VM_NAME | grep Running
      if [[ $? == 0 ]]; then
        # have to stop the VM :(
        # otherwise, it will fail to add the shared directory
        docker-machine stop $VM_NAME
      fi
      # add this directory to the VirtualBox mount (otherwise, we can only mount things from ~/)
      # which will appear mountable within docker as /Users...
      VBoxManage sharedfolder add "$VM_NAME" --name "rsync" --hostpath "/Users/$(whoami)/rsync" --automount
      VBoxManage setextradata $VM_NAME VBoxInternal2/SharedFoldersEnableSymlinksCreate/rsync 1
    fi
    docker-machine ls | grep $VM_NAME | grep Running
    if [[ $? != 0 ]]; then
        ensureDocker
    fi
    docker-machine ssh $VM_NAME 'sudo mkdir -p /rsync'
    # make sure we mount the rsync directory:
    bot "mounting app folder in vm..."
    docker-machine ssh $VM_NAME 'sudo mount -t vboxsf -o uid=1000,gid=50 rsync /rsync'
    if [[ $? != 0 ]]; then
        bot "drats. That didn't work. We don't have a solution for this yet. If you find one, please pull-request."
        exit -1
    fi
}

bot "working on "$APP_ORG/$APP_NAME:$APP_PORT_EXTERNAL;

# OS_VERSION=$(sw_vers -productVersion);
# OS_MAJOR=`echo $OS_VERSION | cut -d. -f1`
# OS_MINOR=`echo $OS_VERSION | cut -d. -f2`
# OS_PATCH=`echo $OS_VERSION | cut -d. -f3`
# kill all instances of a process by name
function killbyname()
{
    ps ax | grep $1 | grep -v grep
    if [ $? != 0 ]; then
      return 0;
    fi
    kill -9 `ps ax | grep $1 | grep -v grep | awk '{print $1}'`
    return 1;
}
function defaultError()
{
    error "sorry, we have not yet figured out an automated solution to this problem. Please investigate and pull-request to https://github.com/atomantic/generator-dockerize"
    exit 1;
}

case "$1" in
    deploy)
        bot "Going to deploy $2 $3"
        if [ "$2" == "docs" ]; then
            action "ensuring git is up-to-date"
            git-up
            ok
            git checkout gh-pages
            git merge develop
            git push -u origin develop
            git push -u origin gh-pages
            git checkout develop
        elif [ "$2" == "image" ]; then
            if [ -n "$3" ]; then
                bot "setting version to "$3
                sed -i "s/0.1.0/$3/g" app/package.json
            fi
            action "starting build"
            buildImage
            ok
            git checkout app/package.json;
            pushImage
        fi
        ;;
    build)
        buildImage
        ;;
    init)
        bot "Hi, I'm going to setup/update your environment and startup the app."


        install_homebrew
        require_tap synack/docker
        require_brew docker-rsync
        need_tools=0

        needed_software=( "docker" "docker-compose" "docker-machine" "vboxmanage" )
        for sft in "${needed_software[@]}"; do
          checkInstall $sft
          if [ $? != 0 ]; then
            need_tools=1
          fi
        done

        if [ $need_tools == 1 ]; then
          bot "You can either install the base set of tools with Docker Toolbox: https://www.docker.com/toolbox\nOr install via homebrew."
          read -r -p "Use Homebrew? [Y|n]" response
          if [[ ! $response =~ ^(no|n|N) ]];then
              install_brewcask
              require_brew docker
              require_brew docker-compose
              require_brew docker-machine
              require_cask virtualbox
              ok
          else
            read -r -p "Did you install Docker Toolkit? [Y|n]" responseToolbox
            if [[ $responseToolbox =~ ^(no|n|N) ]];then
              bot "well, go install Docker Toolkit, then run 'dev init' again"
              exit 1
            fi
            ok
          fi
        fi

        # setup docker-compose.yml
        cat docker-compose.tmpl | sed "s~_PWD_~"$(pwd)"/app~" > docker-compose.yml

        ensureDocker

        dockerStart
        ;;
    run)
        if [ $# -lt 2 ]; then
          error "Usage: $0 run VERSION_TAG; e.g.\n$0 run 1.0.1-SNAPSHOT"
          exit 1
        fi
        ensureDocker
        # run any version deployed to docker hub
        bot "checking $REMOTE_NAME for version tag $2"
        docker run -t $REMOTE_NAME:$2
        docker exec -i -t $(docker ps | grep $REMOTE_NAME:$2 | awk '{print $1;}') bash
        ;;
    shell)
        ensureDocker
        docker ps | grep $APP_NAME_LOCAL
        if [ $? != 0 ]; then
          dockerStart
        fi
        docker exec -i -t $(docker ps | grep $APP_NAME_LOCAL | awk '{print $1;}') bash
        ;;
    restart)
        ensureDocker
        dockerStop
        dockerStart $1
        ;;
    start)
        ensureDocker
        dockerStart $1
        ;;
    stop)
        ensureDocker
        dockerStop
        ;;
    test)
        ensureDocker
        docker ps | grep $APP_NAME_LOCAL
        if [ $? != 0 ]; then
          bot "starting app in background"
          dockerStart background
        fi
        cd app
        ip_address=$(docker-machine ip $VM_NAME)
        # bot "curl -v http://$ip_address:$APP_PORT_EXTERNAL";
        # curl -v http://$ip_address:$APP_PORT_EXTERNAL/
        bot "gulp testimage --host=$ip_address --port=$APP_PORT_EXTERNAL"
        gulp testimage --host=$ip_address --port=$APP_PORT_EXTERNAL
        cd -
        ok "done"
        ;;
    vpn)
        bot "Fixing route table after Cisco VPN disconnect"
        read -r -p "Did you disconnect VPN? [Y|n]" response
        if [[ $response =~ ^(no|n|N) ]];then
          bot "well do that and re-run this..."
          exit 2;
        fi
        ok
        VBOXNET=$(VBoxManage showvminfo $VM_NAME --machinereadable | grep hostonlyadapter | cut -d '"' -f 2)

        if [ -z "$VBOXNET" ]; then
          error "No vboxnet interface found for VM $VM_NAME"
          exit -1;
        fi
        ip_address=$(docker-machine ip $VM_NAME)
        ip_sub=$(echo $ip_address | sed 's/.[^\.]*$//g')
        bot "Requires sudo:"
        sudo route -n delete -net $ip_sub
        sudo route -n add -net $ip_sub.0/24 -interface $VBOXNET
        ok
        ;;
    free)
        ensureDocker
        declutter
        ;;
    clean)
        # purges the docker images relating to this app
        shellinit
        docker ps -a | grep $APP_NAME_LOCAL
        if [[ $? == 0 ]]; then
          docker rm -f $(docker ps -a | grep $APP_NAME_LOCAL | awk '{print $1;}')
        fi
        docker images | grep $APP_NAME_LOCAL > /dev/null 2>&1
        if [ $? == 0 ]; then
          docker rmi -f $APP_NAME_LOCAL
        fi
        ok
        ;;
    scratch)
        # removes the entire docker VM (all docker apps)
        stopRsync
        docker-machine kill $VM_NAME;
        docker-machine rm $VM_NAME;
        # then run dev init again
        bot "ok, run 'dev init' again"
        ;;
    purge)
        bot "killing virtualbox"
        killbyname VBoxXPCOMIPCD
        killbyname VBoxSVC
        killbyname VBoxNetDHCP
        killbyname VBoxHeadless
        ok
        bot "uninstall virtualbox"
        brew cask uninstall virtualbox
        ok
        bot "uninstall docker components"
        brew uninstall docker docker-machine docker-compose
        ok
        bot "run 'dev init' again"
        ;;
    *)
        bot "Hi, I can do a few helpful development tricks.\n"
        echo -e "Run each as an argument to this script (e.g. './dev init'):\n"
        echo "deploy docs - deploy the swagger docs to gh-pages from the develop branch"
        echo "deploy image - deploy the docker image to the registry (will publish to nodes)"
        echo "init - initialize your development environment (installing and running the app)"
        echo "clean - remove locally built docker containers and images"
        echo "restart - restart the service"
        echo "start - start the service"
        echo "stop - stop the service"
        echo "test - test the service by running a docker image and pointing tests at the image"
        echo "vpn - fix routing table after disconnecting from Cisco Anyconnect VPN client"
        ;;
esac
