#!/usr/bin/env bash

###########################################
# This is the project's developer toolkit #
# It was generated by                     #
# generator-dockerize                     #
#
# if you find an issue with this script
# make a pull-request on
# https://github.com/atomantic/generator-dockerize
#
# @author Adam Eivy                       #
# DockerDev: 3.0.2                        #
###########################################


# project specific config
source ./dev.config

# docker-compose will strip underscores from the app name to tack on _web
APP_NAME_LOCAL=${APP_NAME//_/}"_web"
REMOTE_NAME="$DOCKER_REPO/$APP_ORG/$APP_NAME"

###
# echo helper functions
###
# Colors
ESC_SEQ="\x1b["
COL_RESET=$ESC_SEQ"39;49;00m"
COL_RED=$ESC_SEQ"31;01m"
COL_GREEN=$ESC_SEQ"32;01m"
COL_YELLOW=$ESC_SEQ"33;01m"

function ok() {
  echo -e "$COL_GREEN[ok]$COL_RESET "$1
}
function bot() {
  echo; echo -e "$COL_GREEN\[._.]/$COL_RESET - "$1
}
function running() {
  echo; echo -en " ⇒ "$1"..."
}
function action() {
  echo -e "$COL_YELLOW[action]$COL_RESET"; echo -en " ⇒ "$1"..."
}
function warn() {
  echo -e "$COL_YELLOW[warning]$COL_RESET "$1
}
function error() {
  echo -e "$COL_RED[error]$COL_RESET "$1
}

###
# Docker helpers
###
function dockerStart() {
    ensureDocker
    APPURL=http://localhost:$APP_PORT_EXTERNAL
    running "starting via 'docker-compose up'"
    docker-compose up &
    # load in browser
    bot "OK, the app is booting up, we need to wait just a bit before trying to load it..."
    for i in $(seq $APP_BOOT_TIME 1);do
      bot "$i...";
    sleep 1;
    done
    if [[ $1 != "background" ]]; then
      bot "Launching: $APPURL"
      bot "If the app doesn't work, you can debug it by running the following:"
      echo "docker exec -i -t \$(docker ps | grep $APP_NAME_LOCAL | awk '{print \$1;}') bash"
      # open $APPURL:$APP_PORT_EXTERNAL
      open $APPURL
    fi
}
function dockerStop() {
  running "stopping containers"
  docker-compose stop > /dev/null 2>&1
  ok
}
function ensureDocker() {
  docker ps -q > /dev/null 2>&1
  if [[ $? != 0 ]]; then
    error "docker is not running, have you downloaded it?"
    bot "Please download and start docker from: https://docs.docker.com"
    exit 1
  fi
}

case "$1" in
    clean)
        # purges the docker images relating to this app
        docker ps -a | grep $APP_NAME_LOCAL
        if [[ $? == 0 ]]; then
          docker rm -f $(docker ps -a | grep $APP_NAME_LOCAL | awk '{print $1;}')
        fi
        docker images | grep $APP_NAME_LOCAL > /dev/null 2>&1
        if [ $? == 0 ]; then
          docker rmi -f $APP_NAME_LOCAL
        fi
        ok
        ;;
    free)
        running "removing all stopped containers"
        docker rm $(docker ps -a -q) > /dev/null 2>&1
        ok
        running "removing all untagged images (cruft)"
        docker rmi $(docker images -q --filter "dangling=true") > /dev/null 2>&1
        ok
        ;;
    init)
        bot "Hi, I'm going to setup/update your environment and startup the app using Docker"

        bot "working on "$APP_ORG/$APP_NAME:$APP_PORT_EXTERNAL;

        ensureDocker
        dir=$(pwd)
        if [[ -e ./docker-compose.tmpl ]]; then
          cat docker-compose.tmpl | sed "s~_SYNCDIR_~$dir/$APP_LOC~" > docker-compose.yml
        fi
        # run dev.init.sh (if it exists)
        if [[ -e ./dev.init.sh ]]; then
          source ./dev.init.sh
        fi
        dockerStart
        ;;
    rebuild)
        dockerStop
        docker-compose build
        dockerStart $1
        ;;
    restart)
        dockerStop
        dockerStart $1
        ;;
    shell)
        if [ -z $1 ]; then
          # run any version deployed to docker registry
          bot "checking $REMOTE_NAME for version tag $2"
          docker run --rm=true -t $REMOTE_NAME:$2
          docker exec -i -t $(docker ps | grep $REMOTE_NAME:$2 | awk '{print $1;}') bash
          exit $?;
        fi
        instance=$(docker ps | grep $APP_NAME_LOCAL | awk '{print $1;}')
        if [ -z "$instance" ]; then
          docker run --rm=true -i -t $APP_NAME_LOCAL bash
        else
          docker exec -i -t $instance bash
        fi
        ;;
    start)
        dockerStart $1
        ;;
    stop)
        dockerStop
        ;;
    test)
        build_scripts/test.sh 0.1.0 $APP_NAME_LOCAL $APP_PORT_EXTERNAL $APP_PORT_INTERNAL
        ok "done"
        ;;
    update)
        bot "updating the dev toolkit"
        curl -o dev.latest https://raw.githubusercontent.com/atomantic/generator-dockerize/master/app/templates/dev
        ok "fetched latest"
        oldversion=$(grep "^# DockerDev:" dev | sed 's/[^0-9.]//g');
        newversion=$(grep "^# DockerDev:" dev.latest | sed 's/[^0-9.]//g');

        if [ "$oldversion" != "$newversion" ]; then
          bot "Update found! old: $oldversion -> new: $newversion"
          cp dev.latest dev
        fi
        rm dev.latest
        ok "you have the latest version: $newversion"
        ;;
    *)
        bot "Hi, I can do a few helpful development tricks.\n"
        echo -e "Run each as an argument to this script (e.g. './dev init'):\n"
        echo "clean - remove locally built docker containers and images relating to this app"
        echo "free - remove clutter (stopped containers and untagged images)"
        echo "init - initialize your development environment (installing and running the app)"
        echo "rebuild - rebuild the service"
        echo "restart - restart the service"
        echo "shell {version} - get a bash shell on the current running system or on a version from the hub"
        echo "start - start the service"
        echo "stop - stop the service"
        echo "test - test the service by running a docker image and pointing tests at the image"
        echo "update - update the dev tool with the latest automation scripts"
        ;;
esac
