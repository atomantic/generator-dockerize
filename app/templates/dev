#!/usr/bin/env bash

###########################################
# This is the project's developer toolkit #
# It was generated by                     #
# generator-dockerize                     #
#
# if you find an issue with this script
# make a pull-request on
# https://github.com/atomantic/generator-dockerize
#
# @author Adam Eivy                       #
# v1.0.1                                  #
###########################################

# project specific config
source ./dev.config.sh
# include library helpers for colorized echo/bot
source ./lib/libecho.sh
# and installers
source ./lib/libinstall.sh
# functional libraries for docker management
source ./lib/docker.sh

# docker-compose will strip underscores from the app name to tack on _web
APP_NAME_LOCAL=${APP_NAME//_/}"_web"
REMOTE_NAME="$DOCKER_REPO/$APP_ORG/$APP_NAME"

bot "working on "$APP_ORG/$APP_NAME:$APP_PORT_EXTERNAL;

# OS_VERSION=$(sw_vers -productVersion);
# OS_MAJOR=`echo $OS_VERSION | cut -d. -f1`
# OS_MINOR=`echo $OS_VERSION | cut -d. -f2`
# OS_PATCH=`echo $OS_VERSION | cut -d. -f3`
# kill all instances of a process by name
function killbyname()
{
    ps ax | grep $1 | grep -v grep
    if [ $? != 0 ]; then
      return 0;
    fi
    kill -9 `ps ax | grep $1 | grep -v grep | awk '{print $1}'`
    return 1;
}
function defaultError()
{
    error "sorry, we have not yet figured out an automated solution to this problem. Please investigate and pull-request to https://github.com/atomantic/generator-dockerize"
    exit 1;
}

case "$1" in
    deploy)
        bot "Going to deploy $2 $3"
        if [ "$2" == "docs" ]; then
            action "ensuring git is up-to-date"
            git-up
            ok
            git checkout gh-pages
            git merge develop
            git push -u origin develop
            git push -u origin gh-pages
            git checkout develop
        elif [ "$2" == "image" ]; then
            if [ -n "$3" ]; then
                bot "setting version to "$3
                sed -i "s/0.1.0/$3/g" app/package.json
            fi
            action "starting build"
            buildImage
            ok
            git checkout app/package.json;
            pushImage
        fi
        ;;
    build)
        buildImage
        ;;
    init)
        bot "Hi, I'm going to setup/update your environment and startup the app."


        install_homebrew
        require_tap synack/docker
        require_brew docker-rsync
        need_tools=0

        needed_software=( "docker" "docker-compose" "docker-machine" "vboxmanage" )
        for sft in "${needed_software[@]}"; do
          checkInstall $sft
          if [ $? != 0 ]; then
            need_tools=1
          fi
        done

        if [ $need_tools == 1 ]; then
          bot "You can either install the base set of tools with Docker Toolbox: https://www.docker.com/toolbox\nOr install via homebrew."
          read -r -p "Use Homebrew? [Y|n]" response
          if [[ ! $response =~ ^(no|n|N) ]];then
              install_brewcask
              require_brew docker
              require_brew docker-compose
              require_brew docker-machine
              require_cask virtualbox
              ok
          else
            read -r -p "Did you install Docker Toolkit? [Y|n]" responseToolbox
            if [[ $responseToolbox =~ ^(no|n|N) ]];then
              bot "well, go install Docker Toolkit, then run 'dev init' again"
              exit 1;
            fi
            ok
          fi
        fi

        # setup docker-compose.yml
        cat docker-compose.tmpl | sed "s~_PWD_~"$(pwd)"/app~" > docker-compose.yml

        ensureDocker

        dockerStart
        ;;
    run)
        if [ $# -lt 2 ]; then
          error "Usage: $0 run VERSION_TAG; e.g.\n$0 run 1.0.1-SNAPSHOT"
          exit 1
        fi
        ensureDocker
        # run any version deployed to docker hub
        bot "checking $REMOTE_NAME for version tag $2"
        docker run -t $REMOTE_NAME:$2
        docker exec -i -t $(docker ps | grep $REMOTE_NAME:$2 | awk '{print $1;}') bash
        ;;
    shell)
        ensureDocker
        docker ps | grep $APP_NAME_LOCAL
        if [ $? != 0 ]; then
          dockerStart
        fi
        docker exec -i -t $(docker ps | grep $APP_NAME_LOCAL | awk '{print $1;}') bash
        ;;
    restart)
        ensureDocker
        dockerStop
        dockerStart $1
        ;;
    start)
        ensureDocker
        dockerStart $1
        ;;
    stop)
        ensureDocker
        dockerStop
        ;;
    test)
        ensureDocker
        docker ps | grep $APP_NAME_LOCAL
        if [ $? != 0 ]; then
          bot "starting app in background"
          dockerStart background
        fi
        cd app
        ip_address=$(docker-machine ip $VM_NAME)
        # bot "curl -v http://$ip_address:$APP_PORT_EXTERNAL";
        # curl -v http://$ip_address:$APP_PORT_EXTERNAL/
        bot "gulp testimage --host=$ip_address --port=$APP_PORT_EXTERNAL"
        gulp testimage --host=$ip_address --port=$APP_PORT_EXTERNAL
        cd -
        ok "done"
        ;;
    vpn)
        docker-machine restart $VM_NAME;
        ;;
    free)
        ensureDocker
        declutter
        ;;
    clean)
        # purges the docker images relating to this app
        shellinit
        docker ps -a | grep $APP_NAME_LOCAL
        if [[ $? == 0 ]]; then
          docker rm -f $(docker ps -a | grep $APP_NAME_LOCAL | awk '{print $1;}')
        fi
        docker images | grep $APP_NAME_LOCAL > /dev/null 2>&1
        if [ $? == 0 ]; then
          docker rmi -f $APP_NAME_LOCAL
        fi
        ok
        ;;
    scratch)
        # removes the entire docker VM (all docker apps)
        stopRsync
        docker-machine kill $VM_NAME;
        docker-machine rm $VM_NAME;
        # then run dev init again
        bot "ok, run 'dev init' again"
        ;;
    purge)
        bot "killing virtualbox"
        killbyname VBoxXPCOMIPCD
        killbyname VBoxSVC
        killbyname VBoxNetDHCP
        killbyname VBoxHeadless
        ok
        bot "uninstall virtualbox"
        brew cask uninstall virtualbox
        ok
        bot "uninstall docker components"
        brew uninstall docker docker-machine docker-compose
        ok
        bot "run 'dev init' again"
        ;;
    testBuild)
        ensureDocker
        dockerStop
        build_command="docker build -t $REMOTE_NAME ."
        if [[ "$2" == "reset" ]];then
          running "removing docker build..."
          docker kill $(docker ps | grep $REMOTE_NAME | awk '{print $1;}')
          docker rmi -f $REMOTE_NAME
          ok
          echo $build_command
          $build_command
          ok
        fi
        # make sure we have a build version of the docker image
        # and not a local "_web" version
        running "checking for image: docker images | grep $REMOTE_NAME";
        docker images | grep $REMOTE_NAME > /dev/null 2>&1;
        if [ $? != 0 ]; then
            # build it
            echo $build_command
            $build_command
            if [ $? -ne 0 ]; then
              error "failed to build the docker image :("
              exit -1;
            fi
        fi
        bot "found a build image! testing..."
        ./build_scripts/test.sh 1.0.1-SNAPSHOT docker-reg.cloud.corp.dig.com:5000/dtss/dockerized 4103 $VM_NAME
        ok "done"
        ;;
    *)
        bot "Hi, I can do a few helpful development tricks.\n"
        echo -e "Run each as an argument to this script (e.g. './dev init'):\n"
        echo "deploy docs - deploy the swagger docs to gh-pages from the develop branch"
        echo "deploy image - deploy the docker image to the registry (will publish to nodes)"
        echo "init - initialize your development environment (installing and running the app)"
        echo "clean - remove locally built docker containers and images"
        echo "restart - restart the service"
        echo "start - start the service"
        echo "stop - stop the service"
        echo "test - test the service by running a docker image and pointing tests at the image"
        ;;
esac
